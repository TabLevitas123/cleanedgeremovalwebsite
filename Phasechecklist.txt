# Clean Edge Removal LLC Website Project Checklist

## Phase 1: Planning and Architecture
- [x] Analyze requirements
- [x] Design system architecture
- [x] Create file tree structure
- [x] Define component hierarchy
- [x] Plan database schema
- [x] Define API endpoints
- [x] Design authentication flow
- [x] Plan integration services

## Phase 2: Homepage Module Development
- [x] Set up MySQL 8.0 on IONOS
- [ ] Implement Homepage UI
  - [x] Refactor HomePage.tsx into section components (HeroSection, HowItWorksSection, WhyChooseUsSection, ServicesSection, CtaSection, TestimonialsSection, FaqSection, ServiceAreaSection, SchedulingContactSection, NewsletterSection) located in `client/src/components/pages/public/HomePage/sections/`
  - [x] Implement basic structure/placeholders within each section component (assuming based on refactoring)
  - [x] Implement "Why Choose Us" section structure (header, intro, differentiator grid with placeholders, stats placeholders) likely within `WhyChooseUsSection.tsx`
  - [x] Implement "Service Area Map" section structure (two-column layout, map placeholder, content placeholders) likely within `ServiceAreaSection.tsx`
  - [x] Implement "Scheduling/Contact" section structure (two-column layout, header/intro placeholders, basic form HTML) likely within `SchedulingContactSection.tsx`
  - [ ] Add useState hooks for form data (`formData`, `showOtherDescription`) in `SchedulingContactSection.tsx` (Needs verification/implementation)
  - [ ] Add form state handler functions (`handleChange`, `handleServiceChange`, `handleCheckboxChange`) in `SchedulingContactSection.tsx` (Needs verification/implementation)
  - [ ] Connect form state/handlers to form elements (`value`, `checked`, `onChange`) in `SchedulingContactSection.tsx`
  - [ ] Implement conditional rendering for "Other" service description textarea in `SchedulingContactSection.tsx`
  - [ ] Implement styling refinements (checkboxes, placeholders, backgrounds, underlines) in relevant section components and CSS/Tailwind config
  - [ ] Implement dynamic content logic (Scheduling/Contact header/intro based on admin toggle) in `SchedulingContactSection.tsx`
  - [ ] Implement functional components/integrations (Map, Address Checker, Animated Counters, CAPTCHA) within their respective section components
- [ ] Implement Contact Form & Submission
  - [x] Create backend API endpoint structure (`POST /api/quote-requests`)
  - [ ] Implement frontend form state connection (Covered in UI task above, within `SchedulingContactSection.tsx`)
  - [ ] Implement frontend form validation logic in `SchedulingContactSection.tsx`
  - [ ] Implement frontend form submission logic (API call) in `SchedulingContactSection.tsx`
  - [ ] Implement backend logic for quote submission (database save) in `quote.controller.ts`
- [ ] Implement Email Notifications (Trigger from `quote.controller.ts`)
- [ ] Implement Auto Schedule Toggle (Admin setting and frontend conditional rendering in `SchedulingContactSection.tsx`)
- [ ] Basic Homepage Testing (Unit/Integration tests for section components and form logic)

## Phase 3: Modular Website Development & Testing
- [ ] Develop API Module
- [ ] Develop Database Module
- [ ] Develop Admin Portal Module (Basic)
- [ ] Develop Authentication Module (Admin)
- [ ] Develop Employee Portal Module (Basic)
- [ ] Develop Remaining Modules
- [ ] Comprehensive Testing

## Phase 4: CI/CD Pipeline Implementation & Deployment
- [ ] Set up GitHub Actions CI/CD
- [ ] Deploy to IONOS Staging
- [ ] Test on Staging
- [ ] Staging Deployment OK?
- [ ] Deploy to IONOS Production
- [ ] Final Production Testing
- [ ] Production Deployment Complete?